{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","localData","data","map","ammoRow","Damage","Number","type","name","includes","filter","Boolean","className","theme","VictoryTheme","material","symbol","datum","size","x","y","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4mmCAkIeA,MAvDf,WACI,IAAMC,EAfCC,EAAKC,KAAI,SAACC,GACb,QAAIA,EAAQC,QAIL,eACAD,EADP,CAEI,oBAAqBE,OAAOF,EAAQ,sBACpCG,MA/DKC,EA+DSJ,EAAQ,cA9D3BI,EAAKC,SAAS,QACN,QAGRD,EAAKC,SAAS,WACN,YAGRD,EAAKC,SAAS,WACN,YAGRD,EAAKC,SAAS,WACN,YAGRD,EAAKC,SAAS,UACN,WAGRD,EAAKC,SAAS,WACN,YAGRD,EAAKC,SAAS,WACN,YAGRD,EAAKC,SAAS,WACN,YAGRD,EAAKC,SAAS,YACN,WAGRD,EAAKC,SAAS,QACN,SAGRD,EAAKC,SAAS,QACN,SAGRD,EAAKC,SAAS,QACN,SAGRD,EAAKC,SAAS,QACN,cADX,KAjDJ,IAAiBD,KAiEVE,OAAOC,SAMV,OACI,yBAAKC,UAAU,OACX,kBAAC,IAAD,CACIC,MAAOC,IAAaC,UAEpB,kBAAC,IAAD,CACIC,OACI,YAAgB,IAAbC,EAAY,EAAZA,MACC,MAAmB,WAAfA,EAAMV,KACC,aAGQ,WAAfU,EAAMV,KACC,UAGQ,WAAfU,EAAMV,KACC,eAGQ,WAAfU,EAAMV,KACC,SAGQ,aAAfU,EAAMV,KACC,OAGQ,cAAfU,EAAMV,KACC,QAGQ,cAAfU,EAAMV,KACC,SAGQ,cAAfU,EAAMV,KACC,OAGJ,gBAGfW,KAAM,EACNhB,KAAOD,EACPkB,EAAE,SACFC,EAAE,yBC/GFT,QACW,cAA7BU,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8bc24928.chunk.js","sourcesContent":["import React from 'react';\nimport { VictoryChart, VictoryScatter, VictoryTheme } from 'victory';\n\nimport './App.css';\nimport data from './data.json';\n\nfunction getType(name) {\n    if(name.includes('.366')) {\n        return '0.366';\n    }\n    \n    if(name.includes('5.45x39')) {\n        return '5.45x39mm';\n    }\n    \n    if(name.includes('5.45x39')) {\n        return '5.45x39mm';\n    }\n    \n    if(name.includes('5.56x45')) {\n        return '5.56x45mm';\n    }\n    \n    if(name.includes('5.7x28')) {\n        return '5.7x28mm';\n    }\n    \n    if(name.includes('7.62x25')) {\n        return '7.62x25mm';\n    }\n    \n    if(name.includes('7.62x39')) {\n        return '7.62x39mm';\n    }\n    \n    if(name.includes('7.62x51')) {\n        return '7.62x51mm';\n    }\n    \n    if(name.includes('7.62x54R')) {\n        return '7.62x54R';\n    }\n    \n    if(name.includes('9x18')) {\n        return '9x18mm';\n    }\n    \n    if(name.includes('9x19')) {\n        return '9x19mm';\n    }\n    \n    if(name.includes('9x21')) {\n        return '9x21mm';\n    }\n    \n    if(name.includes('9x39')) {\n        return '9x39mm';\n    }\n}\n\nfunction parseData(){\n    return data.map((ammoRow) => {\n        if(!ammoRow.Damage){\n            return false;\n        }\n        \n        return {\n            ...ammoRow,\n            'Penetration Value': Number(ammoRow['Penetration Value']),\n            type: getType(ammoRow['0.12 Patch']),\n        };\n    }).filter(Boolean);\n}\n\n\nfunction App() {\n    const localData = parseData();\n    return (\n        <div className=\"App\">\n            <VictoryChart\n                theme={VictoryTheme.material}\n            >\n                <VictoryScatter\n                    symbol={\n                        ({ datum }) => {\n                            if (datum.type === '9x39mm'){\n                                return 'triangleUp';\n                            }\n                            \n                            if (datum.type === '9x21mm'){\n                                return 'diamond';\n                            }\n                            \n                            if (datum.type === '9x19mm'){\n                                return 'triangleDown';\n                            }\n                            \n                            if (datum.type === '9x18mm'){\n                                return 'circle';\n                            }\n                            \n                            if (datum.type === '7.62x54R'){\n                                return 'plus';\n                            }\n                            \n                            if (datum.type === '7.62x51mm'){\n                                return 'minus';\n                            }\n                            \n                            if (datum.type === '7.62x39mm'){\n                                return 'square';\n                            }\n                            \n                            if (datum.type === '7.62x25mm'){\n                                return 'star';\n                            }\n                            \n                            return 'triangleDown';\n                        }\n                    }\n                    size={1}\n                    data={ localData }\n                    x=\"Damage\"\n                    y=\"Penetration Value\"\n                />\n            </VictoryChart>\n        </div>\n    );\n}\n    \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}