{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["symbols","match","name","symbol","fill","type","App","localData","data","map","ammoRow","Damage","includes","Number","replace","matches","trim","getTypeAndName","filter","Boolean","className","domainPadding","padding","height","theme","VictoryTheme","material","datum","symbolSettings","indexOf","console","log","style","labels","fontSize","size","x","y","orientation","gutter","border","stroke","color","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qnmCAMMA,EAAU,CACZ,CACIC,MAAO,CAAC,YACRC,KAAM,WACNC,OAAQ,CACJC,KAAM,SACNC,KAAM,eAGd,CACIJ,MAAO,CAAC,QACRC,KAAM,OACNC,OAAQ,CACJC,KAAM,SACNC,KAAM,YAGd,CACIJ,MAAO,CAAC,QACRC,KAAM,OACNC,OAAQ,CACJC,KAAM,SACNC,KAAM,SAGd,CACIJ,MAAO,CAAC,QACRC,KAAM,OACNC,OAAQ,CACJC,KAAM,QACNC,KAAM,SAGd,CACIJ,MAAO,CAAC,MACRC,KAAM,KACNC,OAAQ,CACJC,KAAM,SACNC,KAAM,SAGd,CACIJ,MAAO,CAAC,QACRC,KAAM,OACNC,OAAQ,CACJC,KAAM,SACNC,KAAM,iBAGd,CACIJ,MAAO,CAAC,QAAQ,SAChBC,KAAM,SACNC,OAAQ,CACJC,KAAM,SACNC,KAAM,YAmHHC,MA5Df,WACI,IAAMC,EAnBCC,EAAKC,KAAI,SAACC,GACb,QAAIA,EAAQC,SAITD,EAAQ,cAAcE,SAAS,gBAI3B,eACAF,EADP,CAEI,oBAAqBG,OAAOH,EAAQ,uBA3ChD,SAAwBR,GAEpB,GAAGA,EAAKU,SAAS,QACb,MAAO,CACHP,KAAM,QACNH,KAAMA,EAAKY,QAAS,QAAS,KAIrC,GAAGZ,EAAKU,SAAS,SACb,MAAO,CACHP,KAAM,QACNH,KAAMA,EAAKY,QAAS,SAAU,KAItC,GAAGZ,EAAKU,SAAS,SACb,MAAO,CACHP,KAAM,QACNH,KAAMA,EAAKY,QAAS,SAAU,KAItC,IAAMC,EAAUb,EAAKD,MAAO,qCAE5B,MAAO,CACHI,KAAMU,EAAS,GACfb,KAAMA,EAAKY,QAAL,UAAiBC,EAAS,IAAO,IAAKC,QAiBrCC,CAAeP,EAAQ,mBAE/BQ,OAAOC,SAMV,OACI,yBAAKC,UAAU,OACX,kBAAC,IAAD,CACIC,cAAe,GACfC,QAAS,GACTC,OAAQ,IACRC,MAAOC,IAAaC,UAEpB,kBAAC,IAAD,CACIvB,OACI,YAAgB,IAAbwB,EAAY,EAAZA,MAAY,uBACX,IAAI,IAAJ,IAA4B3B,EAA5B,+CAAoC,CAAC,IAA3B4B,EAA0B,+BAChC,IAAI,IAAJ,IAAmBA,EAAe3B,MAAlC,+CAAwC,CAAC,IAA/BA,EAA8B,QACpC,GAAiC,IAA9B0B,EAAMtB,KAAKwB,QAAQ5B,GAClB,OAAO2B,EAAezB,OAAOE,MAHL,oFADzB,kFAWX,OAFAyB,QAAQC,IAAR,gCAAqCJ,EAAMtB,OAEpC,SAGf2B,MAAO,CACHC,OAAQ,CACNC,SAAU,EACV9B,KAAM,SAGZ6B,OAAQ,qBAAGN,MAAkBzB,MAC7BiC,KAAM,EACN3B,KAAOD,EACP6B,EAAE,SACFC,EAAE,sBAEN,kBAAC,IAAD,CACID,EAAG,IAEHC,EAAG,GACHC,YAAY,WACZC,OAAQ,GACRP,MAAO,CACHQ,OAAQ,CACJC,OAAQ,SAEZR,OAAQ,CACJS,MAAO,OACPR,SAAU,IAGlB1B,KAAMR,OC5JNmB,QACW,cAA7BwB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5C,MACvB,2DCZN6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2995dc45.chunk.js","sourcesContent":["import React from 'react';\nimport { VictoryChart, VictoryScatter, VictoryTheme, VictoryLegend } from 'victory';\n\nimport './App.css';\nimport data from './data.json';\n\nconst symbols = [\n    {\n        match: ['7.62x54R'],\n        name: '7.62x54R',\n        symbol: {\n            fill: 'tomato',\n            type: 'triangleUp',\n        },\n    },\n    {\n        match: ['7.62'],\n        name: '7.62',\n        symbol: {\n            fill: 'tomato',\n            type: 'diamond',\n        },\n    },\n    {\n        match: ['5.56'],\n        name: '5.56',\n        symbol: {\n            fill: 'yellow',\n            type: 'star',\n        },\n    },\n    {\n        match: ['5.45'],\n        name: '5.45',\n        symbol: {\n            fill: 'green',\n            type: 'star',\n        },\n    },\n    {\n        match: ['9x'],\n        name: '9x',\n        symbol: {\n            fill: 'yellow',\n            type: 'plus',\n        },\n    },\n    {\n        match: ['12.7'],\n        name: '12.7',\n        symbol: {\n            fill: 'yellow',\n            type: 'triangleDown',\n        },\n    },\n    {\n        match: ['12/70','20/70'],\n        name: 'Shells',\n        symbol: {\n            fill: 'yellow',\n            type: 'circle',\n        },\n    },\n];\n\nfunction getTypeAndName(name) {\n    \n    if(name.includes('.366')) {\n        return {\n            type: '0.366',\n            name: name.replace( '.366 ', '' ),\n        };\n    }\n    \n    if(name.includes('12/70')) {\n        return {\n            type: '12/70',\n            name: name.replace( '12/70 ', '' ),\n        };\n    }\n    \n    if(name.includes('20/70')) {\n        return {\n            type: '20/70',\n            name: name.replace( '20/70 ', '' ),\n        };\n    }\n    \n    const matches = name.match( /\\d{1,2}(\\.\\d{1,2})?x\\d*(\\s?mm)?R?/ );\n    \n    return {\n        type: matches[ 0 ],\n        name: name.replace( `${matches[ 0 ]}`, '' ).trim(),\n    };\n}\n\nfunction parseData(){\n    return data.map((ammoRow) => {\n        if(!ammoRow.Damage){\n            return false;\n        }\n        \n        if(ammoRow['0.12 Patch'].includes('12.7x108 mm')){\n            return false;\n        }\n        \n        return {\n            ...ammoRow,\n            'Penetration Value': Number(ammoRow['Penetration Value']),\n            ...getTypeAndName(ammoRow['0.12 Patch']),\n        };\n    }).filter(Boolean);\n}\n\n\nfunction App() {\n    const localData = parseData();\n    return (\n        <div className=\"App\">\n            <VictoryChart\n                domainPadding={10}\n                padding={20}\n                height={250}\n                theme={VictoryTheme.material}\n            >\n                <VictoryScatter\n                    symbol={\n                        ({ datum }) => {\n                            for(const symbolSettings of symbols){\n                                for(const match of symbolSettings.match){\n                                    if(datum.type.indexOf(match) === 0){\n                                        return symbolSettings.symbol.type;\n                                    }\n                                }\n                            }\n                            \n                            console.log(`No symbol defined for ${datum.type}`);\n                            \n                            return 'minus';\n                        }\n                    }\n                    style={{\n                        labels: {\n                          fontSize: 3,\n                          fill: '#fff',\n                        }\n                      }}\n                    labels={({ datum }) => datum.name}\n                    size={2}\n                    data={ localData }\n                    x=\"Damage\"\n                    y=\"Penetration Value\"\n                />\n                <VictoryLegend\n                    x={290}\n                    // height={150}\n                    y={20}\n                    orientation=\"vertical\"\n                    gutter={10}\n                    style={{\n                        border: { \n                            stroke: \"black\"\n                        },\n                        labels: {\n                            color: '#fff',\n                            fontSize: 5,\n                        }\n                    }}\n                    data={symbols}\n                />\n            </VictoryChart>\n        </div>\n    );\n}\n    \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}